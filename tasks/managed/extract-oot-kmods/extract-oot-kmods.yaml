---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: extract-kmods-from-image
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to extract kernel modules from an image in a specific directory.
  params:
    - name: kmodsPath 
      type: string
      description: Path for the unsigned .ko files to be extracted from the image     
    - name: signedKmodsPath
      type: string
      description: Path to store the extracted file in the workspace 
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
  workspaces:
    - name: input-data
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: extract-kmods
      image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 250m 
      script: |
        #!/usr/bin/env bash
        set -ex
        export DOCKER_CONFIG
        # Copy image to tmp
        KMODS_PATH=$(params.kmodsPath)
        SIGNED_KMODS_PATH=$(params.signedKmodsPath)
        snapshot_json=$(get-resource "snapshot" "$(params.snapshot)")
        sha_image=$(echo "$snapshot_json" | \
                    jq -er '.metadata.annotations["build.appstudio.redhat.com/commit_sha"]')
        source_image=$(echo "$snapshot_json" | \
                    jq -r '.spec.components[].containerImage' | sed 's/@.*$//')
        jq -r '.spec.components[].containerImage' <<< "$snapshot_json"
        SRC_IMAGE="$source_image:$sha_image"
        TMP_DIR=$(mktemp -d)
        echo "Copying $SRC_IMAGE to $TMP_DIR..."
        skopeo copy docker://"$SRC_IMAGE" dir:"$TMP_DIR"
        echo "Inspecting layers to find OOT kernel modules and envfile"
        for LAYER in $(jq -r '.layers[].digest' "$TMP_DIR/manifest.json"); do
            LAYER=${LAYER#sha256:}
            tar -xf "$TMP_DIR/$LAYER" -C "$TMP_DIR"
            if [ -d "$TMP_DIR$KMODS_PATH" ]; then
                echo "Found $KMODS_PATH in layer: $LAYER"
                mkdir -p "$(workspaces.input-data.path)/$SIGNED_KMODS_PATH/"
                cp -r "$TMP_DIR$KMODS_PATH"/*.ko "$(workspaces.input-data.path)/$SIGNED_KMODS_PATH/"
                echo "Copying envfile to get versions data..."
                cp "$TMP_DIR$KMODS_PATH"/../../envfile "$(workspaces.input-data.path)/$SIGNED_KMODS_PATH/"
                break  
            else
                echo "$KMODS_PATH not found in $LAYER so deleting layer..."
                rm -rf "${TMP_DIR:?}/${LAYER:?}"
            fi
        done
