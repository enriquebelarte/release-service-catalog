---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-oot-sign-params
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that collects configuration settings for the OOT kernel modules signing from the data file
  params:
    - name: dataPath
      type: string
      description: Path to the JSON string of the merged data containing the pyxis configuration options to use
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
    - name: ociStorage
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      type: string
      default: ""
    - name: orasOptions
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      default: ""
    - name: dataDir
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
    - name: taskGitRevision
      type: string
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  results:
    - name: checksumFingerprint
      type: string
      description: Secret containing the host key database for SSH the server running signing
    - name: checksumKeytab
      type: string
      description: Secret containing keytab file for the Kerberos user / server
    - name: signing-secret
      type: string
      description: Secret containing the fields signHost, SignKey and SignUser
    - name: kmodsPath
      type: string
      description: Path to the directory containing built oot kernel modules
    - name: vendor
      type: string
      description: Name of the oot modules vendor
    - name: artifact-repo-url
      type: string
      description: Repository URL where signed modules will be pushed
    - name: artifact-branch
      type: string
      description: Branch where signed modules will be pushed
    - name: artifact-repo-token
      type: string
      description: Secret containing access token to push signed modules
    - name: sourceDataArtifact
      type: string
      description: The trusted artifact URI of the source data directory for the next task
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: collect-oot-sign-params
      image:
        quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 50m
      script: |
        #!/usr/bin/env bash
        set -x

        # Check if we have a sourceDataArtifact (consuming from previous task) or reading from workspace (first task)
        if [ -n "$(params.sourceDataArtifact)" ]; then
            echo "Using data from trusted artifact in dataDir"
            DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        else
            echo "Using data from workspace (first task in chain)"
            DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        fi
        
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            echo "Looking for: ${DATA_FILE}"
            echo "Contents of dataDir:"
            ls -la "$(params.dataDir)" || echo "dataDir does not exist"
            echo "Contents of workspace:"
            ls -la "$(workspaces.data.path)" || echo "workspace does not exist"
            exit 1
        fi

        # Check that secrets exist
        if [ "$(jq '.ootsign | has("signing-secret")' "$DATA_FILE")" = false ] ; then
            echo "GitHub secret missing in data JSON file"
            exit 1
        fi

        if [ "$(jq '.ootsign | has("checksumFingerprint")' "$DATA_FILE")" = false ] ; then
            echo "GitHub secret missing in data JSON file"
            exit 1
        fi

        if [ "$(jq '.ootsign | has("checksumKeytab")' "$DATA_FILE")" = false ] ; then
            echo "GitHub secret missing in data JSON file"
            exit 1
        fi
        
        jq -j '.ootsign."signing-secret"' "$DATA_FILE" > "$(results.signing-secret.path)"
        jq -j '.ootsign.checksumFingerprint' "$DATA_FILE" > "$(results.checksumFingerprint.path)"
        jq -j '.ootsign.checksumKeytab' "$DATA_FILE" > "$(results.checksumKeytab.path)"
        jq -j '.ootsign.kmodsPath' "$DATA_FILE" > "$(results.kmodsPath.path)"
        jq -j '.ootsign.vendor' "$DATA_FILE" > "$(results.vendor.path)"
        jq -j '.ootsign."artifact-repo-url"' "$DATA_FILE" > "$(results.artifact-repo-url.path)"
        jq -j '.ootsign."artifact-branch"' "$DATA_FILE" > "$(results.artifact-branch.path)"
        jq -j '.ootsign."artifact-repo-token"' "$DATA_FILE" > "$(results.artifact-repo-token.path)"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
